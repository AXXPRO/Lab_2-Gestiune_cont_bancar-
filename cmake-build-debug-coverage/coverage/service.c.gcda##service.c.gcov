        -:    0:Source:/home/axx/Desktop/Lab_2-Gestiune_cont_bancar-/Service/service.c
        -:    0:Graph:/home/axx/Desktop/Lab_2-Gestiune_cont_bancar-/cmake-build-debug-coverage/CMakeFiles/Lab_2_Gestiune_cont_bancar_.dir/Service/service.c.gcno
        -:    0:Data:/home/axx/Desktop/Lab_2-Gestiune_cont_bancar-/cmake-build-debug-coverage/CMakeFiles/Lab_2_Gestiune_cont_bancar_.dir/Service/service.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include "../Infrastructura/domain.h"
        -:    5:#include "../Infrastructura/repo.h"
        -:    6:#include "../Validation/valid.h"
        -:    7:
function cmpfuncDescrescator called 2 returned 100% blocks executed 100%
        2:    8:int cmpfuncDescrescator(const void* el1, const void* el2)
        -:    9:{
        2:   10:return (get_suma(*((Tranzactie**)el2)) -  get_suma(*((Tranzactie**)el1)));
        2:   10-block  0
call    0 returned 2
call    1 returned 2
        -:   11:}
function cmpfuncCrescator called 3 returned 100% blocks executed 100%
        3:   12:int cmpfuncCrescator(const void* el1, const void* el2)
        -:   13:{
        3:   14:    return (get_suma(*((Tranzactie**)el1)) -  get_suma(*((Tranzactie**)el2)));
        3:   14-block  0
call    0 returned 3
call    1 returned 3
        -:   15:}
function ordonat_service called 2 returned 100% blocks executed 100%
        2:   16:lista* ordonat_service(lista* l, int criteriu)
        -:   17:{
        2:   18:    lista* lista_returnat = creaza_lista();
        2:   18-block  0
call    0 returned 2
        -:   19:
        2:   20:    Tranzactie** lista_tranzactii = get_all(l);
call    0 returned 2
        -:   21:
        8:   22:    for(int i=0; i< numar_elemente(l); i++)
        8:   22-block  0
call    0 returned 8
branch  1 taken 6
branch  2 taken 2 (fallthrough)
        -:   23:    {
        6:   24:            adaugare_tranzactie(lista_returnat,lista_tranzactii[i]);
        6:   24-block  0
call    0 returned 6
        -:   25:    }
        2:   26:    if(criteriu > 0)
        2:   26-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   27:    qsort((void**)(lista_returnat->elemente), numar_elemente(lista_returnat),sizeof(Tranzactie*),cmpfuncCrescator);
        1:   27-block  0
call    0 returned 1
call    1 returned 1
        -:   28:    else
        1:   29:        qsort((void**)(lista_returnat->elemente), numar_elemente(lista_returnat),sizeof(Tranzactie*),cmpfuncDescrescator);
        1:   29-block  0
call    0 returned 1
call    1 returned 1
        -:   30:
        2:   31:    free(lista_tranzactii);
        2:   32:    return lista_returnat;
        2:   32-block  0
        -:   33:
        -:   34:}
function criteriu_suma_service called 1 returned 100% blocks executed 100%
        1:   35:lista* criteriu_suma_service(lista* l, int suma, int comparatie)
        -:   36:{
        1:   37:    lista* lista_returnat = creaza_lista();
        1:   37-block  0
call    0 returned 1
        -:   38:
        1:   39:    Tranzactie** lista_tranzactii = get_all(l);
call    0 returned 1
        -:   40:
        3:   41:    for(int i=0; i< numar_elemente(l); i++)
        2:   41-block  0
        3:   41-block  1
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        -:   42:    {
        2:   43:        if(get_suma(lista_tranzactii[i])*comparatie > suma*comparatie)
        2:   43-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -:   44:        {
        1:   45:            adaugare_tranzactie(lista_returnat,lista_tranzactii[i]);
        1:   45-block  0
call    0 returned 1
        -:   46:
        -:   47:        }
        -:   48:        else
        -:   49:        {
        1:   50:            free(lista_tranzactii[i]->descriere);
        1:   51:            free(lista_tranzactii[i]);
        1:   51-block  0
        -:   52:
        -:   53:        }
        -:   54:    }
        1:   55:    free(lista_tranzactii);
        1:   56:    return lista_returnat;
        1:   56-block  0
        -:   57:
        -:   58:
        -:   59:}
function criteriu_tip_service called 1 returned 100% blocks executed 100%
        1:   60:lista* criteriu_tip_service(lista* l, enum tip tip)
        -:   61:{
        1:   62:    lista* lista_returnat = creaza_lista();
        1:   62-block  0
call    0 returned 1
        -:   63:
        1:   64:    Tranzactie** lista_tranzactii = get_all(l);
call    0 returned 1
        -:   65:
        3:   66:    for(int i=0; i< numar_elemente(l); i++)
        2:   66-block  0
        3:   66-block  1
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        -:   67:    {
        2:   68:        if(get_tip(lista_tranzactii[i])==tip)
        2:   68-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -:   69:        {
        1:   70:            adaugare_tranzactie(lista_returnat,lista_tranzactii[i]);
        1:   70-block  0
call    0 returned 1
        -:   71:
        -:   72:        }
        -:   73:        else
        -:   74:        {
        1:   75:            free(lista_tranzactii[i]->descriere);
        1:   76:            free(lista_tranzactii[i]);
        1:   76-block  0
        -:   77:
        -:   78:        }
        -:   79:    }
        -:   80:
        -:   81:
        -:   82:    /*for(int i =0; i< numar_elemente(l); i++)
        -:   83:    {
        -:   84:        free(lista_tranzactii[i]);
        -:   85:    }
        -:   86:     */
        1:   87:    free(lista_tranzactii);
        1:   88:    return lista_returnat;
        1:   88-block  0
        -:   89:}
        -:   90:
function modificare_service called 2 returned 100% blocks executed 100%
        2:   91:int modificare_service(int id_de_schimbat, int suma, int ziua, enum tip tip, char* descriere, lista* l)
        -:   92:{
        2:   93:Tranzactie* tranz = creaza_tranzactie(id_de_schimbat,suma,ziua,tip,descriere);
        2:   93-block  0
call    0 returned 2
        -:   94:
        2:   95:Tranzactie* tranz_cautata = get_tranzactie(l,id_de_schimbat);
call    0 returned 2
        2:   96:if(tranz_cautata == (Tranzactie*)NULL || !tranzactie_valida(tranz))
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   96-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        1:   97:{ free(tranz);
        1:   98:    return 0;
        1:   98-block  0
        -:   99:}
        -:  100:
        -:  101:
        1:  102:modificare_tranzactie(l,tranz, id_de_schimbat);
        1:  102-block  0
call    0 returned 1
        -:  103:
        1:  104:return 1;
        -:  105:
        -:  106:
        -:  107:}
        -:  108:
function afisare_service called 2 returned 100% blocks executed 100%
        2:  109:char* afisare_service(lista* l)
        -:  110:{   char* descriere_returnat;
        2:  111:    if(numar_elemente(l)!=0)
        2:  111-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:  112:        descriere_returnat= (char*)malloc(sizeof (char)*500* numar_elemente(l));
        1:  112-block  0
call    0 returned 1
        -:  113:    else
        1:  114:        descriere_returnat= (char*)malloc(sizeof (char));
        1:  114-block  0
        -:  115:
        -:  116:
        2:  117:    descriere_returnat[0] = '\0';
        2:  118:    if(numar_elemente(l) == 0)
        2:  118-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:  119:        return descriere_returnat;
        1:  119-block  0
        1:  120:    Tranzactie** lista_tranzactii = get_all(l);
        1:  120-block  0
call    0 returned 1
        -:  121:
        -:  122:    char* temp_char;
        1:  123:    temp_char  =string_tranzactie(lista_tranzactii[0]);
call    0 returned 1
        1:  124:    strcpy(descriere_returnat,temp_char);
        -:  125:
        1:  126:    free(temp_char);
        -:  127:   // free(descriere_returnat);
        1:  128:    strcat(descriere_returnat, "\n");
        -:  129:
        -:  130:
        2:  131:    for(int i =1; i< numar_elemente(l); i++)
        2:  131-block  0
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        -:  132:    {
        1:  133:        temp_char  =string_tranzactie(lista_tranzactii[i]);
        1:  133-block  0
call    0 returned 1
        1:  134:        strcat(descriere_returnat, temp_char);
        1:  135:        free(temp_char);
        1:  136:        strcat(descriere_returnat, "\n");
        -:  137:    }
        -:  138:
        3:  139:    for(int i =0; i< numar_elemente(l); i++)
        1:  139-block  0
        3:  139-block  1
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        -:  140:    {
        2:  141:        free(lista_tranzactii[i]->descriere);
        2:  142:        free(lista_tranzactii[i]);
        2:  142-block  0
        -:  143:    }
        1:  144: free(lista_tranzactii);
        -:  145:
        1:  146:    return descriere_returnat;
        1:  146-block  0
        -:  147:
        -:  148:}
        -:  149:
function stergere_service called 3 returned 100% blocks executed 100%
        3:  150:int stergere_service(int id_de_sters, lista* l)
        -:  151:{
        -:  152:
        3:  153:    return sterge_tranzactie(l, id_de_sters);
        3:  153-block  0
call    0 returned 3
        -:  154:}
        -:  155:
function adaugare_service called 8 returned 100% blocks executed 100%
        8:  156:int adaugare_service(int id, int suma, int ziua, enum tip tip, char* descriere, lista* l)
        -:  157:{
        -:  158:
        8:  159:    Tranzactie* tranz = creaza_tranzactie(id,suma,ziua,tip,descriere);
        8:  159-block  0
call    0 returned 8
        -:  160:
        8:  161:    if(tranzactie_valida(tranz))
call    0 returned 8
branch  1 taken 7 (fallthrough)
branch  2 taken 1
        -:  162:    {
        7:  163:        adaugare_tranzactie(l,tranz);
        7:  163-block  0
call    0 returned 7
        7:  164:        return 1;
        -:  165:    }
        -:  166:    else 
        1:  167:    { free(tranz);
        1:  168:        return 0;
        1:  168-block  0
        -:  169:    }
        -:  170:
        -:  171:}
