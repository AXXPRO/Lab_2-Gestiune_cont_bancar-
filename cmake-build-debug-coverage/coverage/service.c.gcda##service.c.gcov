        -:    0:Source:/home/axx/Desktop/Lab_2-Gestiune_cont_bancar-/Service/service.c
        -:    0:Graph:/home/axx/Desktop/Lab_2-Gestiune_cont_bancar-/cmake-build-debug-coverage/CMakeFiles/Lab_2_Gestiune_cont_bancar_.dir/Service/service.c.gcno
        -:    0:Data:/home/axx/Desktop/Lab_2-Gestiune_cont_bancar-/cmake-build-debug-coverage/CMakeFiles/Lab_2_Gestiune_cont_bancar_.dir/Service/service.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include "../Infrastructura/domain.h"
        -:    5:#include "../Infrastructura/repo.h"
        -:    6:#include "../Validation/valid.h"
        -:    7:
function cmpfuncDescrescator called 2 returned 100% blocks executed 100%
        2:    8:int cmpfuncDescrescator(const void* el1, const void* el2)
        -:    9:{
        2:   10:return (get_suma(*((Tranzactie**)el2)) -  get_suma(*((Tranzactie**)el1)));
        2:   10-block  0
call    0 returned 2
call    1 returned 2
        -:   11:}
function cmpfuncCrescator called 3 returned 100% blocks executed 100%
        3:   12:int cmpfuncCrescator(const void* el1, const void* el2)
        -:   13:{
        3:   14:    return (get_suma(*((Tranzactie**)el1)) -  get_suma(*((Tranzactie**)el2)));
        3:   14-block  0
call    0 returned 3
call    1 returned 3
        -:   15:}
function ordonat_service called 2 returned 100% blocks executed 100%
        2:   16:lista* ordonat_service(lista* l, int criteriu)
        -:   17:{
        2:   18:    lista* lista_returnat = creaza_lista();
        2:   18-block  0
call    0 returned 2
        -:   19:
        2:   20:    Tranzactie** lista_tranzactii = get_all(l);
call    0 returned 2
        -:   21:
        8:   22:    for(int i=0; i< numar_elemente(l); i++)
        8:   22-block  0
call    0 returned 8
branch  1 taken 6
branch  2 taken 2 (fallthrough)
        -:   23:    {
        6:   24:            adaugare_tranzactie(lista_returnat,lista_tranzactii[i]);
        6:   24-block  0
call    0 returned 6
        -:   25:    }
        2:   26:    if(criteriu > 0)
        2:   26-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   27:    qsort((void**)(lista_returnat->elemente), numar_elemente(lista_returnat),sizeof(Tranzactie*),cmpfuncCrescator);
        1:   27-block  0
call    0 returned 1
call    1 returned 1
        -:   28:    else
        1:   29:        qsort((void**)(lista_returnat->elemente), numar_elemente(lista_returnat),sizeof(Tranzactie*),cmpfuncDescrescator);
        1:   29-block  0
call    0 returned 1
call    1 returned 1
        2:   30:    return lista_returnat;
        2:   30-block  0
        -:   31:
        -:   32:}
function criteriu_suma_service called 1 returned 100% blocks executed 100%
        1:   33:lista* criteriu_suma_service(lista* l, int suma, int comparatie)
        -:   34:{
        1:   35:    lista* lista_returnat = creaza_lista();
        1:   35-block  0
call    0 returned 1
        -:   36:
        1:   37:    Tranzactie** lista_tranzactii = get_all(l);
call    0 returned 1
        -:   38:
        3:   39:    for(int i=0; i< numar_elemente(l); i++)
        2:   39-block  0
        3:   39-block  1
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        -:   40:    {
        2:   41:        if(get_suma(lista_tranzactii[i])*comparatie > suma*comparatie)
        2:   41-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -:   42:        {
        1:   43:            adaugare_tranzactie(lista_returnat,lista_tranzactii[i]);
        1:   43-block  0
call    0 returned 1
        -:   44:
        -:   45:        }
        -:   46:    }
        1:   47:    free(lista_tranzactii);
        1:   48:    return lista_returnat;
        1:   48-block  0
        -:   49:
        -:   50:
        -:   51:}
function criteriu_tip_service called 1 returned 100% blocks executed 100%
        1:   52:lista* criteriu_tip_service(lista* l, enum tip tip)
        -:   53:{
        1:   54:    lista* lista_returnat = creaza_lista();
        1:   54-block  0
call    0 returned 1
        -:   55:
        1:   56:    Tranzactie** lista_tranzactii = get_all(l);
call    0 returned 1
        -:   57:
        3:   58:    for(int i=0; i< numar_elemente(l); i++)
        2:   58-block  0
        3:   58-block  1
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        -:   59:    {
        2:   60:        if(get_tip(lista_tranzactii[i])==tip)
        2:   60-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -:   61:        {
        1:   62:            adaugare_tranzactie(lista_returnat,lista_tranzactii[i]);
        1:   62-block  0
call    0 returned 1
        -:   63:
        -:   64:        }
        -:   65:    }
        -:   66:
        -:   67:
        -:   68:    /*for(int i =0; i< numar_elemente(l); i++)
        -:   69:    {
        -:   70:        free(lista_tranzactii[i]);
        -:   71:    }
        -:   72:     */
        1:   73:    free(lista_tranzactii);
        1:   74:    return lista_returnat;
        1:   74-block  0
        -:   75:}
        -:   76:
function modificare_service called 2 returned 100% blocks executed 100%
        2:   77:int modificare_service(int id_de_schimbat, int suma, int ziua, enum tip tip, char* descriere, lista* l)
        -:   78:{
        2:   79:Tranzactie* tranz = creaza_tranzactie(id_de_schimbat,suma,ziua,tip,descriere);
        2:   79-block  0
call    0 returned 2
        -:   80:
        2:   81:Tranzactie* tranz_cautata = get_tranzactie(l,id_de_schimbat);
call    0 returned 2
        2:   82:if(tranz_cautata == (Tranzactie*)NULL || !tranzactie_valida(tranz))
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   82-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        1:   83:{ free(tranz);
        1:   84:    return 0;
        1:   84-block  0
        -:   85:}
        -:   86:
        -:   87:
        1:   88:modificare_tranzactie(l,tranz, id_de_schimbat);
        1:   88-block  0
call    0 returned 1
        1:   89:free(tranz);
        1:   90:return 1;
        -:   91:
        -:   92:
        -:   93:}
function afisare_service called 2 returned 100% blocks executed 100%
        2:   94:char* afisare_service(lista* l)
        -:   95:{
        2:   96:    char* descriere_returnat = (char*)malloc(sizeof (char)*500* numar_elemente(l));
        2:   96-block  0
call    0 returned 2
        -:   97:
        2:   98:    descriere_returnat[0] = '\0';
        2:   99:    if(numar_elemente(l) == 0)
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:  100:        return descriere_returnat;
        1:  100-block  0
        1:  101:    Tranzactie** lista_tranzactii = get_all(l);
        1:  101-block  0
call    0 returned 1
        -:  102:
        -:  103:    char* temp_char;
        1:  104:    temp_char  =string_tranzactie(lista_tranzactii[0]);
call    0 returned 1
        1:  105:    strcpy(descriere_returnat,temp_char);
        -:  106:
        1:  107:    free(temp_char);
        -:  108:   // free(descriere_returnat);
        1:  109:    strcat(descriere_returnat, "\n");
        -:  110:
        -:  111:
        2:  112:    for(int i =1; i< numar_elemente(l); i++)
        2:  112-block  0
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        -:  113:    {
        1:  114:        temp_char  =string_tranzactie(lista_tranzactii[i]);
        1:  114-block  0
call    0 returned 1
        1:  115:        strcat(descriere_returnat, temp_char);
        1:  116:        free(temp_char);
        1:  117:        strcat(descriere_returnat, "\n");
        -:  118:    }
        -:  119:
        3:  120:    for(int i =0; i< numar_elemente(l); i++)
        1:  120-block  0
        3:  120-block  1
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        -:  121:    {
        2:  122:        free(lista_tranzactii[i]);
        2:  122-block  0
        -:  123:    }
        1:  124:    free(lista_tranzactii);
        -:  125:
        1:  126:    return descriere_returnat;
        1:  126-block  0
        -:  127:
        -:  128:}
        -:  129:
function stergere_service called 3 returned 100% blocks executed 100%
        3:  130:int stergere_service(int id_de_sters, lista* l)
        -:  131:{
        -:  132:
        3:  133:    return sterge_tranzactie(l, id_de_sters);
        3:  133-block  0
call    0 returned 3
        -:  134:}
        -:  135:
function adaugare_service called 8 returned 100% blocks executed 100%
        8:  136:int adaugare_service(int id, int suma, int ziua, enum tip tip, char* descriere, lista* l)
        -:  137:{
        -:  138:
        8:  139:    Tranzactie* tranz = creaza_tranzactie(id,suma,ziua,tip,descriere);
        8:  139-block  0
call    0 returned 8
        -:  140:
        8:  141:    if(tranzactie_valida(tranz))
call    0 returned 8
branch  1 taken 7 (fallthrough)
branch  2 taken 1
        -:  142:    {
        7:  143:        adaugare_tranzactie(l,tranz);
        7:  143-block  0
call    0 returned 7
        7:  144:        return 1;
        -:  145:    }
        -:  146:    else 
        1:  147:    { free(tranz);
        1:  148:        return 0;
        1:  148-block  0
        -:  149:    }
        -:  150:
        -:  151:}
