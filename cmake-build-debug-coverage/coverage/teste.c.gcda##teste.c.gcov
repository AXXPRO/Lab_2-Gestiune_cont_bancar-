        -:    0:Source:/home/axx/Desktop/Lab_2-Gestiune_cont_bancar-/Teste/teste.c
        -:    0:Graph:/home/axx/Desktop/Lab_2-Gestiune_cont_bancar-/cmake-build-debug-coverage/CMakeFiles/Lab_2_Gestiune_cont_bancar_.dir/Teste/teste.c.gcno
        -:    0:Data:/home/axx/Desktop/Lab_2-Gestiune_cont_bancar-/cmake-build-debug-coverage/CMakeFiles/Lab_2_Gestiune_cont_bancar_.dir/Teste/teste.c.gcda
        -:    0:Runs:1
        -:    1:#include <assert.h>
        -:    2:#include "../Infrastructura/domain.h"
        -:    3:#include "../Infrastructura/repo.h"
        -:    4:#include "../Service/service.h"
        -:    5:#include "../Validation/valid.h"
        -:    6:#include <string.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <stdio.h>
        -:    9:
        -:   10:void teste_validation();
        -:   11:void teste_domain();
        -:   12:void teste_repository();
        -:   13:void teste_service();
        -:   14:/*
        -:   15:    Functia de rulare a tuturor testelor
        -:   16:*/
function run_all_tests called 1 returned 100% blocks executed 100%
        1:   17:void run_all_tests()
        -:   18:{
        1:   19:    teste_domain();
        1:   19-block  0
call    0 returned 1
        1:   20:    printf("Teste domain trecute!\n");
call    0 returned 1
        1:   21:    teste_repository();
call    0 returned 1
        1:   22:    printf("Teste repository trecute!\n");
call    0 returned 1
        1:   23:    teste_service();
call    0 returned 1
        1:   24:    printf("Teste service trecute!\n");
call    0 returned 1
        1:   25:    teste_validation();
call    0 returned 1
        1:   26:    printf("Teste validation trecute!\n");
call    0 returned 1
        -:   27:
        1:   28:}
        -:   29:/*
        -:   30:Teste pentru functiile legate de service
        -:   31:*/
function teste_service called 1 returned 100% blocks executed 80%
        1:   32:void teste_service()
        -:   33:{       
        1:   34:    int id_1 = 0;
        1:   35:    int suma_1  =50;
        1:   36:    int ziua_1 = 23;
        1:   37:    enum tip tip_1 = intrare;
        1:   38:    char* descriere = (char*)malloc(sizeof(char)*50);
        1:   39:    char* descriere2 = (char*)malloc(sizeof(char)*50);
        1:   40:    strcpy(descriere, "Lemne");
        1:   41:    strcpy(descriere2, "Lemne");
        1:   42:    lista* lista_test = creaza_lista();
        1:   42-block  0
call    0 returned 1
        -:   43:
        -:   44:    char* var_afisare;
        1:   45:    var_afisare = afisare_service(lista_test);
call    0 returned 1
       1*:   46:    assert(var_afisare[0]=='\0');
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   46-block  0
call    2 never executed
        1:   47:    free(var_afisare);
        1:   48:    adaugare_service(id_1,  suma_1, ziua_1,  tip_1, descriere, lista_test);
        1:   48-block  0
call    0 returned 1
        1:   49:    adaugare_service(1,  suma_1, ziua_1,  tip_1, descriere2, lista_test);
call    0 returned 1
        1:   50:    var_afisare = afisare_service(lista_test);
call    0 returned 1
       1*:   51:    assert(strcmp("Tranzactia cu id-ul 0 si suma 50 din ziua 23 de tipul intrare are descrierea Lemne\nTranzactia cu id-ul 1 si suma 50 din ziua 23 de tipul intrare are descrierea Lemne\n", var_afisare)==0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   51-block  0
call    2 never executed
        -:   52:
        1:   53:    free(var_afisare);
        1:   54:    stergere_service(1, lista_test);
        1:   54-block  0
call    0 returned 1
       1*:   55:   assert(adaugare_service(-3,  suma_1, ziua_1,  tip_1, descriere, lista_test)==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   55-block  0
call    3 never executed
       1*:   56:    assert(get_tranzactie(lista_test, 0) != (Tranzactie*)NULL);
        1:   56-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   56-block  1
call    3 never executed
        -:   57:
        -:   58:
        1:   59:    descriere2 = (char*)malloc(sizeof(char)*50);
        1:   60:    strcpy(descriere2, "Lemne");
       1*:   61:   assert(modificare_service(1,suma_1+1, ziua_1,  tip_1, descriere, lista_test) == 0 );
        1:   61-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   61-block  1
call    3 never executed
       1*:   62:    assert(modificare_service(0,suma_1+1, ziua_1,  tip_1, descriere2, lista_test) == 1 );
        1:   62-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   62-block  1
call    3 never executed
        -:   63:
        1:   64:    Tranzactie* tranz_modificata = get_tranzactie(lista_test, 0);
        1:   64-block  0
call    0 returned 1
       1*:   65:    assert(get_suma(tranz_modificata)==51);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   65-block  0
call    3 never executed
        -:   66:
       1*:   67:    assert(stergere_service(2,lista_test) == 0);
        1:   67-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   67-block  1
call    3 never executed
       1*:   68:    assert(stergere_service(0,lista_test) == 1);
        1:   68-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   68-block  1
call    3 never executed
        1:   69:  tranz_modificata = get_tranzactie(lista_test, 0);
        1:   69-block  0
call    0 returned 1
       1*:   70:    assert(tranz_modificata == (Tranzactie*)NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   70-block  0
call    2 never executed
        -:   71:
        1:   72:    distruge(lista_test);
        1:   72-block  0
call    0 returned 1
        -:   73:
        -:   74:
        -:   75:
        -:   76:    //TESTE CRITERII
        -:   77:
        1:   78:    lista_test = creaza_lista();
call    0 returned 1
        1:   79:    char* descriere1 = (char*)malloc(sizeof(char)*50);
        1:   80:    strcpy(descriere1, "Prima");
        1:   81:   adaugare_service(0,  100, 2,  intrare, descriere1, lista_test);
call    0 returned 1
        -:   82:
        1:   83:  descriere2 = (char*)malloc(sizeof(char)*50);
        1:   84:    strcpy(descriere2, "Doua");
        1:   85:    adaugare_service(1,  300, 3,  iesire, descriere2, lista_test);
call    0 returned 1
        -:   86:
        -:   87:    lista* lista_temp;
        -:   88:
        1:   89:    lista_temp = criteriu_tip_service(lista_test,intrare);
call    0 returned 1
       1*:   90:    assert(numar_elemente(lista_temp)==1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   90-block  0
call    3 never executed
        -:   91:    Tranzactie** temp ;
        1:   92:    temp = get_all(lista_temp);
        1:   92-block  0
call    0 returned 1
        -:   93:
       1*:   94:    assert(get_id(temp[0]) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   94-block  0
call    3 never executed
        -:   95:
        2:   96:    for (int i =0; i< numar_elemente(lista_temp); i++)
        1:   96-block  0
        2:   96-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        -:   97:    {
        1:   98:        free(temp[i]->descriere);
        1:   99:        free(temp[i]);
        1:   99-block  0
        -:  100:    }
        1:  101:    free(temp);
        1:  102:    distruge(lista_temp);
        1:  102-block  0
call    0 returned 1
        -:  103:
        1:  104:    lista_temp = criteriu_suma_service(lista_test,150,1);
call    0 returned 1
       1*:  105:    assert(numar_elemente(lista_temp)==1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  105-block  0
call    3 never executed
        1:  106:     temp =get_all(lista_temp);
        1:  106-block  0
call    0 returned 1
       1*:  107:    assert(get_id(temp[0]) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  107-block  0
call    3 never executed
        -:  108:
        2:  109:    for(int i =0; i< numar_elemente(lista_temp); i++)
        1:  109-block  0
        2:  109-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        -:  110:    {
        1:  111:        free(temp[i]->descriere);
        1:  112:        free(temp[i]);
        1:  112-block  0
        -:  113:    }
        1:  114:    free(temp);
        -:  115:
        1:  116:    distruge(lista_temp);
        1:  116-block  0
call    0 returned 1
        1:  117:    distruge(lista_test);
call    0 returned 1
        -:  118:
        1:  119:    lista_test = creaza_lista();
call    0 returned 1
        1:  120:     descriere1 = (char*)malloc(sizeof(char)*50);
        1:  121:    descriere2 = (char*)malloc(sizeof(char)*50);
        1:  122:    char* descriere3 = (char*)malloc(sizeof(char)*50);
        -:  123:
        1:  124:    strcpy(descriere1, "Una");
        1:  125:    strcpy(descriere2, "Doua");
        1:  126:    strcpy(descriere3, "Trei");
        1:  127:    adaugare_service(0,300,2,iesire,descriere1,lista_test);
call    0 returned 1
        1:  128:    adaugare_service(1,1,2,iesire,descriere2,lista_test);
call    0 returned 1
        1:  129:    adaugare_service(2,150,4,intrare,descriere3,lista_test);
call    0 returned 1
        -:  130:
        1:  131:    lista_temp = ordonat_service(lista_test,1);
call    0 returned 1
        -:  132:
        -:  133:
        -:  134:   //printf("%d%d%d",get_id(lista_temp->elemente[0]),get_id(lista_temp->elemente[1]),get_id(lista_temp->elemente[2]) );
        -:  135:
       1*:  136:    assert(get_id(lista_temp->elemente[0]) ==1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  136-block  0
call    3 never executed
       1*:  137:    assert(get_id(lista_temp->elemente[2]) ==0);
        1:  137-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  137-block  1
call    3 never executed
        -:  138:
        1:  139:    distruge(lista_temp);
        1:  139-block  0
call    0 returned 1
        1:  140:    lista_temp = ordonat_service(lista_test,-1);
call    0 returned 1
       1*:  141:    assert(get_id(lista_temp->elemente[0]) ==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  141-block  0
call    3 never executed
       1*:  142:    assert(get_id(lista_temp->elemente[2]) ==1);
        1:  142-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  142-block  1
call    3 never executed
        -:  143:
        1:  144:    distruge(lista_temp);
        1:  144-block  0
call    0 returned 1
        1:  145:    distruge(lista_test);
call    0 returned 1
        -:  146:
        -:  147:
        -:  148:
        1:  149:}
        -:  150:
        -:  151:/*
        -:  152:Teste pentru functiile legate de repository
        -:  153:*/
function teste_repository called 1 returned 100% blocks executed 80%
        1:  154:void teste_repository()
        -:  155:{ 
        1:  156:    lista* l = creaza_lista();
        1:  156-block  0
call    0 returned 1
       1*:  157:    assert(numar_elemente(l) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  157-block  0
call    3 never executed
        -:  158:    Tranzactie *tranz,*tranz1,*tranz2,*tranz3, *tranz_noua;
        -:  159:    char *d1,*d2,*d3, *d4;
        1:  160:    d1 = (char*)malloc(sizeof(char)*10); d1[0] = '\n';
        1:  161:    d2 = (char*)malloc(sizeof(char)*10); d2[0] = '\n';
        1:  162:    d3 = (char*)malloc(sizeof(char)*10); d3[0] = '\n';
        -:  163:
        1:  164:    strcpy(d1,"cadou");
        1:  165:    strcpy(d2,"cerere");
        1:  166:    strcpy(d3,"imprumut");
        1:  167:    tranz1 = creaza_tranzactie(0,13,5,iesire,d1);
        1:  167-block  0
call    0 returned 1
        1:  168:    tranz2 = creaza_tranzactie(1,15,2,iesire,d2);
call    0 returned 1
        1:  169:    tranz3 = creaza_tranzactie(2,177,6,intrare,d3);
call    0 returned 1
        -:  170:
        1:  171:    adaugare_tranzactie(l,tranz1);
call    0 returned 1
       1*:  172:    assert(numar_elemente(l) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  172-block  0
call    3 never executed
        1:  173:    adaugare_tranzactie(l,tranz2);
        1:  173-block  0
call    0 returned 1
        1:  174:    adaugare_tranzactie(l,tranz3);
call    0 returned 1
       1*:  175:    assert(numar_elemente(l) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  175-block  0
call    3 never executed
        -:  176:
        -:  177:
        1:  178:    adaugare_tranzactie(l,tranz3);
        1:  178-block  0
call    0 returned 1
       1*:  179:    assert(numar_elemente(l) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  179-block  0
call    3 never executed
        -:  180:
        1:  181:    sterge_tranzactie(l, 1);
        1:  181-block  0
call    0 returned 1
        -:  182:
        1:  183:    d2 = (char*)malloc(sizeof(char)*10);
        1:  184:    d2[0] = '\n';
        1:  185:    strcpy(d2,"cerere");
        1:  186:    tranz2 = creaza_tranzactie(1,15,2,iesire,d2);
call    0 returned 1
        -:  187:
        1:  188:    adaugare_tranzactie(l, tranz2);
call    0 returned 1
        1:  189:    tranz2 = creaza_tranzactie(1,15,2,iesire,d2);
call    0 returned 1
        1:  190:    tranz = get_tranzactie(l, 1);
call    0 returned 1
       1*:  191:    assert(get_suma(tranz)==get_suma(tranz2));
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  191-block  0
call    4 never executed
        -:  192:
        -:  193://    free(tranz2->descriere);
        1:  194:    free(tranz2);
        1:  195:    tranz = get_tranzactie(l, 3);
        1:  195-block  0
call    0 returned 1
       1*:  196:    assert(tranz==NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  196-block  0
call    2 never executed
        -:  197:   
        -:  198:
        1:  199:    d4 = (char*)malloc(sizeof(char)*10); d4[0] = '\n';
        1:  200:    strcpy(d4,"taxe");
        -:  201:
        -:  202:
        1:  203:    tranz_noua = creaza_tranzactie(2,900,30,iesire,d4);
        1:  203-block  0
call    0 returned 1
        1:  204:    modificare_tranzactie(l, tranz_noua, get_id(tranz3));
call    0 returned 1
call    1 returned 1
        -:  205:
        1:  206:    Tranzactie* tranzactie_cautata_invalida = get_tranzactie(l,7);
call    0 returned 1
       1*:  207:    assert(tranzactie_cautata_invalida == (Tranzactie*)NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  207-block  0
call    2 never executed
        -:  208:
        1:  209:    Tranzactie* tranzactie_cautata = get_tranzactie(l,0);
        1:  209-block  0
call    0 returned 1
       1*:  210:    assert(tranzactie_cautata ==tranz1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  210-block  0
call    2 never executed
        -:  211:
        -:  212:
        1:  213:    sterge_tranzactie(l, 2);
        1:  213-block  0
call    0 returned 1
        1:  214:    tranzactie_cautata_invalida =get_tranzactie(l,2);
call    0 returned 1
       1*:  215:    assert(tranzactie_cautata_invalida == (Tranzactie*)NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  215-block  0
call    2 never executed
        -:  216:
       1*:  217:    assert(numar_elemente(l) == 2);
        1:  217-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  217-block  1
call    3 never executed
        -:  218:
        -:  219:
        1:  220:    Tranzactie ** lista_tranzactii = get_all(l);
        1:  220-block  0
call    0 returned 1
        -:  221:
       1*:  222:    assert(get_id(lista_tranzactii[0])==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  222-block  0
call    3 never executed
       1*:  223:    assert(get_id(lista_tranzactii[1])==1);
        1:  223-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  223-block  1
call    3 never executed
        -:  224:
        3:  225:    for(int i =0; i< numar_elemente(l); i++)
        1:  225-block  0
        3:  225-block  1
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        2:  226:    {   free(lista_tranzactii[i]->descriere);
        2:  227:        free(lista_tranzactii[i]);
        2:  227-block  0
        -:  228:    }
        1:  229:    free(lista_tranzactii);
        1:  230:    distruge(l);
        1:  230-block  0
call    0 returned 1
        -:  231:
        -:  232:
        -:  233:
        -:  234:
        -:  235:    
        -:  236:
        1:  237:}
        -:  238:/*
        -:  239:Teste pentru functiile legate de domain
        -:  240:*/
function teste_domain called 1 returned 100% blocks executed 73%
        1:  241:void teste_domain()
        -:  242:{
        -:  243:    Tranzactie* tranz;
        1:  244:    int id=1;
        1:  245:    int suma=50;
        1:  246:    int ziua=4;
        1:  247:    enum tip tip = intrare;
        1:  248:    char descriere[] = "cadou";
        -:  249:
        1:  250:    tranz = creaza_tranzactie(id,suma,ziua,tip,descriere);
        1:  250-block  0
call    0 returned 1
       1*:  251:    assert(id==get_id(tranz));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  251-block  0
call    3 never executed
       1*:  252:    assert(suma==get_suma(tranz));
        1:  252-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  252-block  1
call    3 never executed
       1*:  253:    assert(ziua==get_ziua(tranz));
        1:  253-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  253-block  1
call    3 never executed
       1*:  254:    assert(strcmp(descriere, get_descriere(tranz))==0);
        1:  254-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  254-block  1
call    3 never executed
        -:  255:   
        -:  256:   //int id_nou = 7;
        1:  257:   int suma_nou = 100;
        1:  258:   int ziua_nou=9;
        1:  259:   enum tip tip_nou = iesire;
        1:  260:   char descriere_nou[] = "cerere";
        -:  261:
        1:  262:   set_suma(tranz,suma_nou);
        1:  262-block  0
call    0 returned 1
        1:  263:   set_ziua(tranz,ziua_nou);
call    0 returned 1
        1:  264:   set_tip(tranz,tip_nou);
call    0 returned 1
        1:  265:   set_descriere(tranz,descriere_nou);
call    0 returned 1
        -:  266:
       1*:  267:   assert(id==get_id(tranz));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  267-block  0
call    3 never executed
       1*:  268:    assert(suma_nou==get_suma(tranz));
        1:  268-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  268-block  1
call    3 never executed
       1*:  269:    assert(ziua_nou==get_ziua(tranz));
        1:  269-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  269-block  1
call    3 never executed
       1*:  270:    assert(strcmp(descriere_nou, get_descriere(tranz))==0);
        1:  270-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  270-block  1
call    3 never executed
        -:  271:    
        -:  272:    char* string_tranz;
        -:  273:
        1:  274:   string_tranz = string_tranzactie(tranz);
        1:  274-block  0
call    0 returned 1
        -:  275:   // printf("%s\n", string_tranz);
       1*:  276:    assert(strcmp(string_tranz,"Tranzactia cu id-ul 1 si suma 100 din ziua 9 de tipul iesire are descrierea cerere" ) == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  276-block  0
call    2 never executed
        -:  277:
        1:  278:    free(string_tranz);
        1:  279:    set_tip(tranz,intrare);
        1:  279-block  0
call    0 returned 1
        1:  280:    string_tranz = string_tranzactie(tranz);
call    0 returned 1
       1*:  281:    assert(strcmp(string_tranz,"Tranzactia cu id-ul 1 si suma 100 din ziua 9 de tipul intrare are descrierea cerere" ) == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  281-block  0
call    2 never executed
        -:  282:
        1:  283:    free(string_tranz);
        1:  284:    free(tranz);
        -:  285:
        1:  286:}
        -:  287:
        -:  288:/*
        -:  289: Testele legate de validator
        -:  290: */
function teste_validation called 1 returned 100% blocks executed 80%
        1:  291:void teste_validation()
        -:  292:{
        1:  293:    Tranzactie* tranz_invalida = creaza_tranzactie(-2,-23,90,iesire,"");
        1:  293-block  0
call    0 returned 1
        -:  294:
       1*:  295:   assert (tranzactie_valida(tranz_invalida) ==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  295-block  0
call    3 never executed
        1:  296:    free(tranz_invalida);
        -:  297:
        1:  298:}
