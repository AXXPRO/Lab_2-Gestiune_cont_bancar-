        -:    0:Source:C:/Users/Gabi/Desktop/Lab_2-Gestiune_cont_bancar-/Teste/teste.c
        -:    0:Graph:C:\Users\Gabi\Desktop\Lab_2-Gestiune_cont_bancar-\cmake-build-debug-coverage\CMakeFiles\Lab_2_Gestiune_cont_bancar_.dir\Teste\teste.c.gcno
        -:    0:Data:C:\Users\Gabi\Desktop\Lab_2-Gestiune_cont_bancar-\cmake-build-debug-coverage\CMakeFiles\Lab_2_Gestiune_cont_bancar_.dir\Teste\teste.c.gcda
        -:    0:Runs:1
        -:    1:#include <assert.h>
        -:    2:#include "..\Infrastructura\domain.h"
        -:    3:#include "..\Infrastructura\repo.h"
        -:    4:#include "..\Service\service.h"
        -:    5:#include "../Validation/valid.h"
        -:    6:#include <string.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <stdio.h>
        -:    9:
        -:   10:void teste_validation();
        -:   11:void teste_domain();
        -:   12:void teste_repository();
        -:   13:void teste_service();
        -:   14:/*
        -:   15:    Functia de rulare a tuturor testelor
        -:   16:*/
function run_all_tests called 1 returned 100% blocks executed 100%
        1:   17:void run_all_tests()
        -:   18:{
        1:   19:    teste_domain();
        1:   19-block  0
call    0 returned 1
        1:   20:    printf("Teste domain trecute!\n");
call    0 returned 1
        1:   21:    teste_repository();
call    0 returned 1
        1:   22:    printf("Teste repository trecute!\n");
call    0 returned 1
        1:   23:    teste_service();
call    0 returned 1
        1:   24:    printf("Teste service trecute!\n");
call    0 returned 1
        1:   25:    teste_validation();
call    0 returned 1
        1:   26:    printf("Teste validation trecute!\n");
call    0 returned 1
        -:   27:
        1:   28:}
        -:   29:/*
        -:   30:Teste pentru functiile legate de service
        -:   31:*/
function teste_service called 1 returned 100% blocks executed 64%
        1:   32:void teste_service()
        -:   33:{       
        1:   34:    int id_1 = 0;
        1:   35:    int suma_1  =50;
        1:   36:    int ziua_1 = 23;
        1:   37:    enum tip tip_1 = intrare;
        1:   38:    char* descriere = (char*)malloc(sizeof(char));
        1:   39:    strcpy(descriere, "Lemne");
        -:   40:
        1:   41:    lista* lista_test = creaza_lista();
        1:   41-block  0
call    0 returned 1
        -:   42:
        -:   43:    char* var_afisare;
        1:   44:    var_afisare = afisare_service(lista_test);
call    0 returned 1
       1*:   45:    assert(var_afisare[0]=='\0');
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   45-block  0
call    2 never executed
        1:   45-block  1
        1:   46:    free(var_afisare);
        1:   47:    adaugare_service(id_1,  suma_1, ziua_1,  tip_1, descriere, lista_test);
        1:   47-block  0
call    0 returned 1
        1:   48:    adaugare_service(1,  suma_1, ziua_1,  tip_1, descriere, lista_test);
call    0 returned 1
        1:   49:    var_afisare = afisare_service(lista_test);
call    0 returned 1
       1*:   50:    assert(strcmp("Tranzactia cu id-ul 0 si suma 50 din ziua 23 de tipul intrare are descrierea Lemne\nTranzactia cu id-ul 1 si suma 50 din ziua 23 de tipul intrare are descrierea Lemne\n", var_afisare)==0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   50-block  0
call    2 never executed
        1:   50-block  1
        -:   51:
        1:   52:    free(var_afisare);
        1:   53:    stergere_service(1, lista_test);
        1:   53-block  0
call    0 returned 1
       1*:   54:   assert(adaugare_service(-3,  suma_1, ziua_1,  tip_1, descriere, lista_test)==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   54-block  0
call    3 never executed
        1:   54-block  1
       1*:   55:    assert(get_tranzactie(lista_test, 0) != (Tranzactie*)NULL);
        1:   55-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   55-block  1
call    3 never executed
        1:   55-block  2
        -:   56:
       1*:   57:   assert(modificare_service(1,suma_1+1, ziua_1,  tip_1, descriere, lista_test) == 0 );
        1:   57-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   57-block  1
call    3 never executed
        1:   57-block  2
       1*:   58:    assert(modificare_service(0,suma_1+1, ziua_1,  tip_1, descriere, lista_test) == 1 );
        1:   58-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   58-block  1
call    3 never executed
        1:   58-block  2
        -:   59:
        1:   60:    Tranzactie* tranz_modificata = get_tranzactie(lista_test, 0);
        1:   60-block  0
call    0 returned 1
       1*:   61:    assert(get_suma(tranz_modificata)==51);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   61-block  0
call    3 never executed
        1:   61-block  1
        -:   62:
       1*:   63:    assert(stergere_service(2,lista_test) == 0);
        1:   63-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   63-block  1
call    3 never executed
        1:   63-block  2
       1*:   64:    assert(stergere_service(0,lista_test) == 1);
        1:   64-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   64-block  1
call    3 never executed
        1:   64-block  2
        1:   65:  tranz_modificata = get_tranzactie(lista_test, 0);
        1:   65-block  0
call    0 returned 1
       1*:   66:    assert(tranz_modificata == (Tranzactie*)NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   66-block  0
call    2 never executed
        1:   66-block  1
        -:   67:   
        1:   68:    free(lista_test);
        -:   69:
        1:   70:}
        -:   71:
        -:   72:/*
        -:   73:Teste pentru functiile legate de repository
        -:   74:*/
function teste_repository called 1 returned 100% blocks executed 71%
        1:   75:void teste_repository()
        -:   76:{ 
        1:   77:    lista* l = creaza_lista();
        1:   77-block  0
call    0 returned 1
       1*:   78:    assert(numar_elemente(l) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   78-block  0
call    3 never executed
        1:   78-block  1
        -:   79:    Tranzactie *tranz,*tranz1,*tranz2,*tranz3, *tranz_noua;
        -:   80:    char *d1,*d2,*d3, *d4;
        1:   81:    d1 = (char*)malloc(sizeof(char)*10); d1[0] = '\n';
        1:   82:    d2 = (char*)malloc(sizeof(char)*10); d2[0] = '\n';
        1:   83:    d3 = (char*)malloc(sizeof(char)*10); d3[0] = '\n';
        -:   84:
        1:   85:    strcpy(d1,"cadou");
        1:   86:    strcpy(d2,"cerere");
        1:   87:    strcpy(d3,"imprumut");
        1:   88:    tranz1 = creaza_tranzactie(0,13,5,iesire,d1);
        1:   88-block  0
call    0 returned 1
        1:   89:    tranz2 = creaza_tranzactie(1,15,2,iesire,d2);
call    0 returned 1
        1:   90:    tranz3 = creaza_tranzactie(2,177,6,intrare,d3);
call    0 returned 1
        -:   91:
        1:   92:    adaugare_tranzactie(l,tranz1);
call    0 returned 1
       1*:   93:    assert(numar_elemente(l) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   93-block  0
call    3 never executed
        1:   93-block  1
        1:   94:    adaugare_tranzactie(l,tranz2);
        1:   94-block  0
call    0 returned 1
        1:   95:    adaugare_tranzactie(l,tranz3);
call    0 returned 1
       1*:   96:    assert(numar_elemente(l) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   96-block  0
call    3 never executed
        1:   96-block  1
        -:   97:
        -:   98:
        1:   99:    adaugare_tranzactie(l,tranz3);
        1:   99-block  0
call    0 returned 1
       1*:  100:    assert(numar_elemente(l) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  100-block  0
call    3 never executed
        1:  100-block  1
        -:  101:
        1:  102:    sterge_tranzactie(l, 1);
        1:  102-block  0
call    0 returned 1
        -:  103:
        1:  104:    adaugare_tranzactie(l, tranz2);
call    0 returned 1
        1:  105:    tranz2 = creaza_tranzactie(1,15,2,iesire,d2);
call    0 returned 1
        1:  106:    tranz = get_tranzactie(l, 1);
call    0 returned 1
       1*:  107:    assert(get_suma(tranz)==get_suma(tranz2));
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  107-block  0
call    4 never executed
        1:  107-block  1
        -:  108:
        1:  109:    tranz = get_tranzactie(l, 3);
        1:  109-block  0
call    0 returned 1
       1*:  110:    assert(tranz==NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  110-block  0
call    2 never executed
        1:  110-block  1
        -:  111:   
        -:  112:
        1:  113:    d4 = (char*)malloc(sizeof(char)*10); d4[0] = '\n';
        1:  114:    strcpy(d4,"taxe");
        -:  115:
        -:  116:
        1:  117:    tranz_noua = creaza_tranzactie(2,900,30,iesire,d4);
        1:  117-block  0
call    0 returned 1
        1:  118:    modificare_tranzactie(l, tranz_noua, get_id(tranz3));
call    0 returned 1
call    1 returned 1
        -:  119:
        1:  120:    Tranzactie* tranzactie_cautata_invalida = get_tranzactie(l,7);
call    0 returned 1
       1*:  121:    assert(tranzactie_cautata_invalida == (Tranzactie*)NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  121-block  0
call    2 never executed
        1:  121-block  1
        -:  122:
        1:  123:    Tranzactie* tranzactie_cautata = get_tranzactie(l,0);
        1:  123-block  0
call    0 returned 1
       1*:  124:    assert(tranzactie_cautata ==tranz1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  124-block  0
call    2 never executed
        1:  124-block  1
        -:  125:
        -:  126:
        1:  127:    sterge_tranzactie(l, 2);
        1:  127-block  0
call    0 returned 1
        1:  128:    tranzactie_cautata_invalida =get_tranzactie(l,2);
call    0 returned 1
       1*:  129:    assert(tranzactie_cautata_invalida == (Tranzactie*)NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  129-block  0
call    2 never executed
        1:  129-block  1
        -:  130:
       1*:  131:    assert(numar_elemente(l) == 2);
        1:  131-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  131-block  1
call    3 never executed
        1:  131-block  2
        -:  132:
        -:  133:
        1:  134:    Tranzactie ** lista_tranzactii = get_all(l);
        1:  134-block  0
call    0 returned 1
        -:  135:
       1*:  136:    assert(get_id(lista_tranzactii[0])==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  136-block  0
call    3 never executed
        1:  136-block  1
       1*:  137:    assert(get_id(lista_tranzactii[1])==1);
        1:  137-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  137-block  1
call    3 never executed
        1:  137-block  2
        -:  138:
        3:  139:    for(int i =0; i< numar_elemente(l); i++)
        1:  139-block  0
        3:  139-block  1
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        -:  140:    {
        2:  141:        free(lista_tranzactii[i]);
        2:  141-block  0
        -:  142:    }
        1:  143:    free(lista_tranzactii);
        1:  144:    distruge(l);
        1:  144-block  0
call    0 returned 1
        -:  145:
        -:  146:
        -:  147:
        -:  148:
        -:  149:    
        -:  150:
        1:  151:}
        -:  152:/*
        -:  153:Teste pentru functiile legate de domain
        -:  154:*/
function teste_domain called 1 returned 100% blocks executed 65%
        1:  155:void teste_domain()
        -:  156:{
        -:  157:    Tranzactie* tranz;
        1:  158:    int id=1;
        1:  159:    int suma=50;
        1:  160:    int ziua=4;
        1:  161:    enum tip tip = intrare;
        1:  162:    char descriere[] = "cadou";
        -:  163:
        1:  164:    tranz = creaza_tranzactie(id,suma,ziua,tip,descriere);
        1:  164-block  0
call    0 returned 1
       1*:  165:    assert(id==get_id(tranz));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  165-block  0
call    3 never executed
        1:  165-block  1
       1*:  166:    assert(suma==get_suma(tranz));
        1:  166-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  166-block  1
call    3 never executed
        1:  166-block  2
       1*:  167:    assert(ziua==get_ziua(tranz));
        1:  167-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  167-block  1
call    3 never executed
        1:  167-block  2
       1*:  168:    assert(strcmp(descriere, get_descriere(tranz))==0);
        1:  168-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  168-block  1
call    3 never executed
        1:  168-block  2
        -:  169:   
        -:  170:   //int id_nou = 7;
        1:  171:   int suma_nou = 100;
        1:  172:   int ziua_nou=9;
        1:  173:   enum tip tip_nou = iesire;
        1:  174:   char descriere_nou[] = "cerere";
        -:  175:
        1:  176:   set_suma(tranz,suma_nou);
        1:  176-block  0
call    0 returned 1
        1:  177:   set_ziua(tranz,ziua_nou);
call    0 returned 1
        1:  178:   set_tip(tranz,tip_nou);
call    0 returned 1
        1:  179:   set_descriere(tranz,descriere_nou);
call    0 returned 1
        -:  180:
       1*:  181:   assert(id==get_id(tranz));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  181-block  0
call    3 never executed
        1:  181-block  1
       1*:  182:    assert(suma_nou==get_suma(tranz));
        1:  182-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  182-block  1
call    3 never executed
        1:  182-block  2
       1*:  183:    assert(ziua_nou==get_ziua(tranz));
        1:  183-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  183-block  1
call    3 never executed
        1:  183-block  2
       1*:  184:    assert(strcmp(descriere_nou, get_descriere(tranz))==0);
        1:  184-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  184-block  1
call    3 never executed
        1:  184-block  2
        -:  185:    
        1:  186:    char* string_tranz = (char*)malloc(sizeof(char));
        -:  187:
        1:  188:   string_tranz = string_tranzactie(tranz);
        1:  188-block  0
call    0 returned 1
        -:  189:   // printf("%s\n", string_tranz);
       1*:  190:    assert(strcmp(string_tranz,"Tranzactia cu id-ul 1 si suma 100 din ziua 9 de tipul iesire are descrierea cerere" ) == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  190-block  0
call    2 never executed
        1:  190-block  1
        -:  191:
        1:  192:    set_tip(tranz,intrare);
        1:  192-block  0
call    0 returned 1
        1:  193:    string_tranz = string_tranzactie(tranz);
call    0 returned 1
       1*:  194:    assert(strcmp(string_tranz,"Tranzactia cu id-ul 1 si suma 100 din ziua 9 de tipul intrare are descrierea cerere" ) == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  194-block  0
call    2 never executed
        1:  194-block  1
        -:  195:
        1:  196:    free(string_tranz);
        1:  197:    free(tranz);
        -:  198:
        1:  199:}
        -:  200:
        -:  201:/*
        -:  202: Testele legate de validator
        -:  203: */
function teste_validation called 1 returned 100% blocks executed 71%
        1:  204:void teste_validation()
        -:  205:{
        1:  206:    Tranzactie* tranz_invalida = creaza_tranzactie(-2,-23,90,iesire,"");
        1:  206-block  0
call    0 returned 1
        -:  207:
       1*:  208:   assert (tranzactie_valida(tranz_invalida) ==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  208-block  0
call    3 never executed
        1:  208-block  1
        -:  209:
        -:  210:
        1:  211:}
