        -:    0:Source:C:/Users/Gabi/Desktop/Lab_2-Gestiune_cont_bancar-/UI/ui.c
        -:    0:Graph:C:\Users\Gabi\Desktop\Lab_2-Gestiune_cont_bancar-\cmake-build-debug-coverage\CMakeFiles\Lab_2_Gestiune_cont_bancar_.dir\UI\ui.c.gcno
        -:    0:Data:C:\Users\Gabi\Desktop\Lab_2-Gestiune_cont_bancar-\cmake-build-debug-coverage\CMakeFiles\Lab_2_Gestiune_cont_bancar_.dir\UI\ui.c.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:#include <stdlib.h>
        -:    5:#include "..\Service\service.h"
        -:    6:#include "ui.h"
        -:    7://#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10:/*
        -:   11:Functia ia un sir de caractere si returneaza daca este sau nu numar
        -:   12:PreconditiiL s - sir de caractere cu \0 la sfarsit
        -:   13:Postconditii: 1 daca poate fi numar, 0 altfel
        -:   14:*/
function is_number called 0 returned 0% blocks executed 0%
    #####:   15:int is_number(char* s)
        -:   16:{   
        -:   17:
    #####:   18:    if (strlen(s)==0)
    %%%%%:   18-block  0
branch  0 never executed
branch  1 never executed
    #####:   19:    return 0;
    %%%%%:   19-block  0
    #####:   20:    if(s[0]=='-')
    %%%%%:   20-block  0
branch  0 never executed
branch  1 never executed
    #####:   21:    return is_number(s+1);
    %%%%%:   21-block  0
call    0 never executed
    #####:   22:    for(int i = 0; i<strlen(s); i++)
    %%%%%:   22-block  0
    %%%%%:   22-block  1
    %%%%%:   22-block  2
branch  0 never executed
branch  1 never executed
        -:   23:    {
    #####:   24:        if(s[i] - '0' < 0 || s[i]- '0' > 9)
    %%%%%:   24-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   24-block  1
branch  2 never executed
branch  3 never executed
    #####:   25:        return 0;
    %%%%%:   25-block  0
        -:   26:    }
        -:   27:
    #####:   28:    return 1;
    %%%%%:   28-block  0
        -:   29:}
        -:   30:
function interface called 0 returned 0% blocks executed 0%
    #####:   31:void interface()
    #####:   32:{ system("cls");
    %%%%%:   32-block  0
call    0 never executed
    #####:   33:  printf("Alegeti optiunea pe care o doriti. Optiunile sunt urmatoarele:\n");
call    0 never executed
    #####:   34:  printf("1.Adaugare de tranzactii.\n");
call    0 never executed
    #####:   35:  printf("2.Modificare tranzactie existenta.\n");
call    0 never executed
    #####:   36:  printf("3.Stergere tranzactie existenta.\n");
call    0 never executed
    #####:   37:  printf("4.Vizualizare tranzactii dupa un criteriu.\n");
call    0 never executed
    #####:   38:  printf("5.Vizualizare tranzactii ordonat dupa suma\n");
call    0 never executed
    #####:   39:  printf("6.Afisarea tranzactiilor din aplicatie.\n");
call    0 never executed
    #####:   40:  printf("7.Inchidere aplicatie.\n");
call    0 never executed
    #####:   41:  printf(">>>");
call    0 never executed
        -:   42:
    #####:   43:}
        -:   44:
        -:   45:
        -:   46:
        -:   47:
        -:   48:
function run_ui called 0 returned 0% blocks executed 0%
    #####:   49:void run_ui()
    #####:   50:{   lista* lista_tranzactii = creaza_lista();
    %%%%%:   50-block  0
call    0 never executed
        -:   51:    
        -:   52:    char choice[20];
    #####:   53:    int program_running = 1;
        -:   54:    int number_choice;
    #####:   55:    while(program_running)
    %%%%%:   55-block  0
branch  0 never executed
branch  1 never executed
        -:   56:    {
    #####:   57:        interface();
    %%%%%:   57-block  0
call    0 never executed
        -:   58:        //scanf("%s", choice);
    #####:   59:        gets(choice);
call    0 never executed
    #####:   60:        if(strlen(choice)==1)
branch  0 never executed
branch  1 never executed
        -:   61:        {
        -:   62:           
        -:   63:            //Run program
    #####:   64:                number_choice = choice[0]-'0';
    #####:   65:                switch (number_choice)
    %%%%%:   65-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:   66:                {
    #####:   67:                    case 1:
    #####:   68:                    adaugare(lista_tranzactii);
    %%%%%:   68-block  0
call    0 never executed
    #####:   69:                    break;
    #####:   70:                    case 2:
    #####:   71:                    modificare(lista_tranzactii);
    %%%%%:   71-block  0
call    0 never executed
    #####:   72:                    break;
    #####:   73:                    case 3:
    #####:   74:                    stergere(lista_tranzactii);
    %%%%%:   74-block  0
call    0 never executed
    #####:   75:                    break;
    #####:   76:                    case 4:
    #####:   77:                    criteriu(lista_tranzactii);
    %%%%%:   77-block  0
call    0 never executed
    #####:   78:                    break;
    #####:   79:                    case 5:
    #####:   80:                        ordonat(lista_tranzactii);
    %%%%%:   80-block  0
call    0 never executed
    #####:   81:                    break;
    #####:   82:                    case 6:
    #####:   83:                   afisare(lista_tranzactii);
    %%%%%:   83-block  0
call    0 never executed
    #####:   84:                    getchar();
call    0 never executed
        -:   85:
    #####:   86:                    break;
    #####:   87:                    case 7:
    #####:   88:                    program_running = 0;
    #####:   89:                    distruge(lista_tranzactii);
    %%%%%:   89-block  0
call    0 never executed
    #####:   90:                    break;
    #####:   91:                default:
        -:   92:                {
    #####:   93:                printf("Varianta inexistenta!\n");
    %%%%%:   93-block  0
call    0 never executed
    #####:   94:                gets(choice);
call    0 never executed
        -:   95:                }
    #####:   96:                    break;
        -:   97:                }
        -:   98:
        -:   99:
        -:  100:            
        -:  101:          
        -:  102:        }
    #####:  103:        else{printf("Varianta inexistenta!\n");
    %%%%%:  103-block  0
call    0 never executed
    #####:  104:                gets(choice);}
call    0 never executed
        -:  105:
        -:  106:
        -:  107:
        -:  108:    }
        -:  109:    
        -:  110:
    #####:  111:}
        -:  112:
        -:  113:
function ordonat called 0 returned 0% blocks executed 0%
    #####:  114:void ordonat(lista* l)
        -:  115:{
        -:  116:    char alegere[50];
    #####:  117:    printf("Cum doriti sa sortam lista?\n1. Crescator\n2. Descrescator\n");
    %%%%%:  117-block  0
call    0 never executed
    #####:  118:    gets(alegere);
call    0 never executed
        -:  119:
        -:  120:
    #####:  121:    if(is_number(alegere))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  122:    {
    #####:  123:        int numar = atoi(alegere);
    %%%%%:  123-block  0
call    0 never executed
    #####:  124:        if(numar <1 || numar >2)
branch  0 never executed
branch  1 never executed
    %%%%%:  124-block  0
branch  2 never executed
branch  3 never executed
        -:  125:        {
    #####:  126:            printf("Varianta inexistenta!");
    %%%%%:  126-block  0
call    0 never executed
    #####:  127:            getchar();
call    0 never executed
        -:  128:        }
        -:  129:        else
        -:  130:
        -:  131:        {
        -:  132:            lista* lista_ordonata;
    #####:  133:            if(numar == 1)
    %%%%%:  133-block  0
branch  0 never executed
branch  1 never executed
    #####:  134:            lista_ordonata = ordonat_service(l,1);
    %%%%%:  134-block  0
call    0 never executed
        -:  135:            else
    #####:  136:                lista_ordonata = ordonat_service(l,-1);
    %%%%%:  136-block  0
call    0 never executed
        -:  137:
        -:  138:
    #####:  139:            afisare(lista_ordonata);
    %%%%%:  139-block  0
call    0 never executed
    #####:  140:            free(lista_ordonata);
        -:  141:
        -:  142:
        -:  143:        }
        -:  144:
        -:  145:    }
        -:  146:    else
        -:  147:
        -:  148:    {
    #####:  149:        printf("Varianta inexistenta!");
    %%%%%:  149-block  0
call    0 never executed
    #####:  150:        getchar();
call    0 never executed
        -:  151:    }
    #####:  152:}
function criteriu_suma called 0 returned 0% blocks executed 0%
    #####:  153:void criteriu_suma(lista* l)
        -:  154:{
        -:  155:    char alegere[50];
        -:  156:    char suma[50];
    #####:  157:    printf("Cum doriti sa filtram dupa suma?\n1. Mai mari decat o suma data\n2. Mai mici decat o suma data\n");
    %%%%%:  157-block  0
call    0 never executed
    #####:  158:    gets(alegere);
call    0 never executed
        -:  159:
    #####:  160:    if(is_number(alegere))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  161:    {
    #####:  162:        int numar = atoi(alegere);
    %%%%%:  162-block  0
call    0 never executed
    #####:  163:        if(numar <1 || numar >2)
branch  0 never executed
branch  1 never executed
    %%%%%:  163-block  0
branch  2 never executed
branch  3 never executed
        -:  164:        {
    #####:  165:            printf("Varianta inexistenta!");
    %%%%%:  165-block  0
call    0 never executed
    #####:  166:            getchar();
call    0 never executed
        -:  167:        }
        -:  168:        else
        -:  169:
        -:  170:        {
    #####:  171:            printf("Dati suma cu care comparam\n");
    %%%%%:  171-block  0
call    0 never executed
    #####:  172:            gets(suma);
call    0 never executed
    #####:  173:            if(is_number(suma))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  174:            {
    #####:  175:                int suma_numar = atoi(suma);
    %%%%%:  175-block  0
call    0 never executed
        -:  176:                lista* l_temporara;
    #####:  177:                if(numar == 1)
branch  0 never executed
branch  1 never executed
        -:  178:                {
    #####:  179:                     l_temporara= criteriu_suma_service(l,suma_numar,1);
    %%%%%:  179-block  0
call    0 never executed
        -:  180:                }
        -:  181:                else
        -:  182:                {
    #####:  183:                   l_temporara= criteriu_suma_service(l,suma_numar,-1);
    %%%%%:  183-block  0
call    0 never executed
        -:  184:                }
    #####:  185:                afisare(l_temporara);
    %%%%%:  185-block  0
call    0 never executed
    #####:  186:                free(l_temporara);
        -:  187:            }
        -:  188:            else{
    #####:  189:                printf("Suma invalida!");
    %%%%%:  189-block  0
call    0 never executed
    #####:  190:                getchar();
call    0 never executed
        -:  191:            }
        -:  192:        }
        -:  193:
        -:  194:    }
        -:  195:    else
        -:  196:
        -:  197:    {
    #####:  198:        printf("Varianta inexistenta!");
    %%%%%:  198-block  0
call    0 never executed
    #####:  199:        getchar();
call    0 never executed
        -:  200:    }
        -:  201:
    #####:  202:}
function criteriu_tip called 0 returned 0% blocks executed 0%
    #####:  203:void criteriu_tip(lista* l)
        -:  204:{char alegere[50];
    #####:  205:    printf("Tranzactiile cu ce tip doriti sa le vedeti?\n1. Intrare\n2. Iesire");
    %%%%%:  205-block  0
call    0 never executed
    #####:  206:    gets(alegere);
call    0 never executed
    #####:  207:    if(is_number(alegere))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  208:    {
    #####:  209:        int numar = atoi(alegere);
    %%%%%:  209-block  0
call    0 never executed
    #####:  210:        if(numar <1 || numar >2)
branch  0 never executed
branch  1 never executed
    %%%%%:  210-block  0
branch  2 never executed
branch  3 never executed
        -:  211:        {
    #####:  212:            printf("Varianta inexistenta!");
    %%%%%:  212-block  0
call    0 never executed
    #####:  213:            getchar();
call    0 never executed
        -:  214:        }
        -:  215:        else
        -:  216:
        -:  217:        {
        -:  218:            enum tip tipul;
    #####:  219:            if(numar == 1)
    %%%%%:  219-block  0
branch  0 never executed
branch  1 never executed
    #####:  220:                tipul = intrare;
    %%%%%:  220-block  0
        -:  221:            else
    #####:  222:             tipul = iesire;
    %%%%%:  222-block  0
        -:  223:            lista* l_temporara;
    #####:  224:            l_temporara = criteriu_tip_service(l, tipul);
    %%%%%:  224-block  0
call    0 never executed
    #####:  225:            afisare(l_temporara);
call    0 never executed
        -:  226:
    #####:  227:            free(l_temporara);
        -:  228:
        -:  229:        }
        -:  230:
        -:  231:    }
        -:  232:    else
        -:  233:
        -:  234:    {
    #####:  235:        printf("Varianta inexistenta!");
    %%%%%:  235-block  0
call    0 never executed
    #####:  236:        getchar();
call    0 never executed
        -:  237:    }
        -:  238:
        -:  239:
    #####:  240:}
function criteriu called 0 returned 0% blocks executed 0%
    #####:  241:void criteriu(lista* l)
        -:  242:{
        -:  243:    char alegere[50];
    #####:  244:  printf("Ce criteriu de sortare doriti?\n 1. Dupa tip\n 2. Dupa suma\n");
    %%%%%:  244-block  0
call    0 never executed
    #####:  245: gets(alegere);
call    0 never executed
    #####:  246:  if(is_number(alegere))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  247:  {
    #####:  248:int numar = atoi(alegere);
    %%%%%:  248-block  0
call    0 never executed
        -:  249:
    #####:  250:switch(numar)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -:  251:
        -:  252:{
    #####:  253:    case 1:
    #####:  254:         criteriu_tip(l);
    %%%%%:  254-block  0
call    0 never executed
    #####:  255:        break;
    #####:  256:    case 2:
    #####:  257:        criteriu_suma(l);
    %%%%%:  257-block  0
call    0 never executed
    #####:  258:        break;
    #####:  259:    default:{
    #####:  260:        printf("Varianta inexistenta!");
    %%%%%:  260-block  0
call    0 never executed
    #####:  261:        getchar();
call    0 never executed
        -:  262:    }
        -:  263:
        -:  264:}
        -:  265:
        -:  266:  }
        -:  267:
        -:  268:  else
        -:  269:
        -:  270:  {
    #####:  271:      printf("Varianta inexistenta!");
    %%%%%:  271-block  0
call    0 never executed
    #####:  272:      getchar();
call    0 never executed
        -:  273:  }
        -:  274:
        -:  275:
    #####:  276:}
        -:  277:
function afisare called 0 returned 0% blocks executed 0%
    #####:  278:void afisare(lista* l)
        -:  279:{
        -:  280:    char *de_afisat;
    #####:  281:    de_afisat= afisare_service(l);
    %%%%%:  281-block  0
call    0 never executed
    #####:  282:    printf("%s", de_afisat);
call    0 never executed
    #####:  283:    getchar();
call    0 never executed
    #####:  284:    free (de_afisat);
        -:  285:
    #####:  286:}
        -:  287:
function adaugare called 0 returned 0% blocks executed 0%
    #####:  288:void adaugare(lista* l)
        -:  289:{   
        -:  290:    char params[100];
        -:  291:    char true_params[5][50];
        -:  292:    char* cuvant;
        -:  293:    //printf
    #####:  294:    printf("Dati id-ul, ziua, suma, tipul, si descrierea tranzactiei, separate prin ; :\n");
    %%%%%:  294-block  0
call    0 never executed
        -:  295:     //getchar();
    #####:  296:    gets(params);
call    0 never executed
        -:  297:    //scanf("%s",params);
    #####:  298:    cuvant = strtok(params, ";");
call    0 never executed
        -:  299:    int i;
        -:  300:
    #####:  301:    for(i=0;cuvant != NULL; i++)
    %%%%%:  301-block  0
branch  0 never executed
branch  1 never executed
    #####:  302:     {strcpy(true_params[i], cuvant);   
    #####:  303:     cuvant = strtok(NULL, ";");
    %%%%%:  303-block  0
call    0 never executed
        -:  304:     }
        -:  305:
    #####:  306:    if(i!=5)
    %%%%%:  306-block  0
branch  0 never executed
branch  1 never executed
        -:  307:    {
    #####:  308:printf("Paramtetrii invalizi!");
    %%%%%:  308-block  0
call    0 never executed
    #####:  309:getchar();
call    0 never executed
        -:  310:    }
        -:  311:    else 
        -:  312:    {
        -:  313:    enum tip tip;
    #####:  314:    int ok = 0;
        -:  315:    char tipul[50];
    #####:  316:    strcpy(tipul, true_params[3]);
    #####:  317:    if(strstr("intrare", tipul)!=NULL)
    %%%%%:  317-block  0
branch  0 never executed
branch  1 never executed
    #####:  318:      {tip = intrare; ok =1;}
    %%%%%:  318-block  0
    #####:  319:    if(strstr("iesire", tipul)!=NULL)
    %%%%%:  319-block  0
branch  0 never executed
branch  1 never executed
    #####:  320:      {tip = iesire; ok=1;}
    %%%%%:  320-block  0
        -:  321:
        -:  322:
    #####:  323:    for(int i =0; i<3; i++)
    %%%%%:  323-block  0
    %%%%%:  323-block  1
    %%%%%:  323-block  2
branch  0 never executed
branch  1 never executed
        -:  324:    {
    #####:  325:        if(!is_number(true_params[i]))
    %%%%%:  325-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  326:        ok = 0;
    %%%%%:  326-block  0
        -:  327:    }
        -:  328:
        -:  329:  
    #####:  330: if(ok)
    %%%%%:  330-block  0
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:    char* descriere=(char*)malloc(sizeof(char)*50);
    #####:  333:    strcpy(descriere, true_params[4]);
    #####:  334:    int id = atoi(true_params[0]);
    %%%%%:  334-block  0
call    0 never executed
    #####:  335:    int ziua = atoi(true_params[1]);
call    0 never executed
    #####:  336:    int suma = atoi(true_params[2]);
call    0 never executed
        -:  337:
    #####:  338:      if( adaugare_service(id,suma,ziua,tip,descriere,l)==0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  339:      {
    #####:  340:          printf("Paramtetrii invalizi!");
    %%%%%:  340-block  0
call    0 never executed
    #####:  341:          getchar();
call    0 never executed
        -:  342:      }
        -:  343:           // free(descriere);
        -:  344:    }
        -:  345:    else 
        -:  346:    {
    #####:  347:printf("Paramtetrii invalizi!");
    %%%%%:  347-block  0
call    0 never executed
    #####:  348:getchar();
call    0 never executed
        -:  349:    }
        -:  350:    }
        -:  351:
    #####:  352:}
function stergere called 0 returned 0% blocks executed 0%
    #####:  353:void stergere(lista* l)
        -:  354:{char params[5];
    #####:  355:int ok = 1;
    #####:  356:    printf("Dati id-ul tranzactiei pe care dorim sa o stergem: \n");
    %%%%%:  356-block  0
call    0 never executed
    #####:  357:    gets(params);
call    0 never executed
        -:  358:
    #####:  359:     if(!is_number(params))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  360:        ok = 0;
    %%%%%:  360-block  0
        -:  361:    
    #####:  362:    if(!ok)
    %%%%%:  362-block  0
branch  0 never executed
branch  1 never executed
        -:  363:    {
    #####:  364:        printf("Id invalid!\n");
    %%%%%:  364-block  0
call    0 never executed
    #####:  365:        getchar();
call    0 never executed
        -:  366:
        -:  367:    }
        -:  368:    else
    #####:  369:    {       int id = atoi(params);
    %%%%%:  369-block  0
call    0 never executed
    #####:  370:            if(!stergere_service(id, l))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  371:            {
    #####:  372:                printf("Stergere neefectuata!");
    %%%%%:  372-block  0
call    0 never executed
    #####:  373:                 getchar();  
call    0 never executed
        -:  374:            }
        -:  375:
        -:  376:    }
        -:  377:    
    #####:  378:}
        -:  379:/*
        -:  380:Functia din ui responsabila pentru a modifica o tranzactie existenta
        -:  381:Anunta utilziatorul daca id-ul nu exista
        -:  382:Preconditii: l este o lista
        -:  383:Postconditii: se va schimba tranzactia cu un id dat cu alta
        -:  384:*/
function modificare called 0 returned 0% blocks executed 0%
    #####:  385:void modificare(lista* l)
        -:  386:{
        -:  387:char params[100];
        -:  388:    char true_params[5][50];
        -:  389:    char* cuvant;
        -:  390:    //printf
    #####:  391:    printf("Dati id-ul tranzactiei pe care doriti sa o modificam, ziua, suma, tipul, si descrierea tranzactiei, separate prin ; :\n");
    %%%%%:  391-block  0
call    0 never executed
        -:  392:     //getchar();
    #####:  393:    gets(params);
call    0 never executed
        -:  394:    //scanf("%s",params);
    #####:  395:    cuvant = strtok(params, ";");
call    0 never executed
        -:  396:    int i;
        -:  397:
    #####:  398:    for(i=0;cuvant != NULL; i++)
    %%%%%:  398-block  0
branch  0 never executed
branch  1 never executed
    #####:  399:     {strcpy(true_params[i], cuvant);   
    #####:  400:     cuvant = strtok(NULL, ";");
    %%%%%:  400-block  0
call    0 never executed
        -:  401:     }
        -:  402:
    #####:  403:    if(i!=5)
    %%%%%:  403-block  0
branch  0 never executed
branch  1 never executed
        -:  404:    {
    #####:  405:printf("Paramtetrii invalizi!");
    %%%%%:  405-block  0
call    0 never executed
    #####:  406:getchar();
call    0 never executed
        -:  407:    }
        -:  408:    else 
        -:  409:    {
        -:  410:    enum tip tip;
    #####:  411:    int ok = 0;
        -:  412:    char tipul[50];
    #####:  413:    strcpy(tipul, true_params[3]);
    #####:  414:    if(strstr("intrare", tipul)!=NULL)
    %%%%%:  414-block  0
branch  0 never executed
branch  1 never executed
    #####:  415:      {tip = intrare; ok =1;}
    %%%%%:  415-block  0
    #####:  416:    if(strstr("iesire", tipul)!=NULL)
    %%%%%:  416-block  0
branch  0 never executed
branch  1 never executed
    #####:  417:      {tip = iesire; ok=1;}
    %%%%%:  417-block  0
        -:  418:
        -:  419:
    #####:  420:    for(int i =0; i<3; i++)
    %%%%%:  420-block  0
    %%%%%:  420-block  1
    %%%%%:  420-block  2
branch  0 never executed
branch  1 never executed
        -:  421:    {
    #####:  422:        if(!is_number(true_params[i]))
    %%%%%:  422-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  423:        ok = 0;
    %%%%%:  423-block  0
        -:  424:    }
        -:  425:
        -:  426:  
    #####:  427: if(ok)
    %%%%%:  427-block  0
branch  0 never executed
branch  1 never executed
        -:  428:    {
    #####:  429:    char* descriere=(char*)malloc(sizeof(char)*50);
    #####:  430:    strcpy(descriere, true_params[4]);
    #####:  431:    int id = atoi(true_params[0]);
    %%%%%:  431-block  0
call    0 never executed
    #####:  432:    int ziua = atoi(true_params[1]);
call    0 never executed
    #####:  433:    int suma = atoi(true_params[2]);
call    0 never executed
        -:  434:    ///MODIFICARE SERVICE
        -:  435:
        -:  436:        
    #####:  437:       if( !modificare_service(id,suma,ziua,tip,descriere,l))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  438:       {
        -:  439:
    #####:  440:    printf("Modificare neefectuata!");
    %%%%%:  440-block  0
call    0 never executed
    #####:  441:    getchar();
call    0 never executed
        -:  442:       }
        -:  443:           // free(descriere);
        -:  444:    }
        -:  445:    else 
        -:  446:    {
    #####:  447:printf("Paramtetrii invalizi!");
    %%%%%:  447-block  0
call    0 never executed
    #####:  448:getchar();
call    0 never executed
        -:  449:    }
        -:  450:    }
        -:  451:
    #####:  452:}
